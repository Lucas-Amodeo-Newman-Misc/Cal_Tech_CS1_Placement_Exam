import sys

class Hanoi():

    def __init__(self, starting_disks):
        self._state = {}
        self._state["A"] = [(i) for i in range(8, 0, -1)]
        self._state["B"] = []
        self._state["C"] = []

    def display(self):
        print("A:  " + " ".join(list(map(str, self._state["A"]))))
        print("B:  " + " ".join(list(map(str, self._state["B"]))))
        print("C:  " + " ".join(list(map(str, self._state["C"]))))
        print()

    def move(self, peg1, peg2):
        disk = self._state[peg1][-1]
        target = self._state[peg2][-1]
        if disk > target:
            print("Illegal move, %d from %s is smaller than %d from %s" % target, peg2, disk, peg1)
            raise ValueError
        self._state[peg2].append(self._state[peg1].pop())
        self.display()

    def solve(self):
        self._transfer_stack("A", "B", len(self._state["A"])

    def _transfer_stack(self, start_peg, target_peg, depth):
        if depth > 1:
            pegs = ["A", "B", "C"]
            for i in pegs:
                if i not in (start_peg, target_peg):
                    other_peg = i
            self.transfer_stack(start_peg, other_peg, depth-1)
        else:
            self.move(start_peg, target_peg)

Hanoi(sys.argv[1])

        
    
        
            
              
